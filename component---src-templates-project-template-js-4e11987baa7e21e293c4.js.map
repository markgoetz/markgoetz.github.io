{"version":3,"sources":["webpack:///./src/templates/ProjectTemplate.js","webpack:///./src/components/Layout.js","webpack:///./src/components/SEO.js"],"names":["pageQuery","ProjectTemplate","data","markdownRemark","file","frontmatter","html","title","className","src","publicURL","alt","dangerouslySetInnerHTML","__html","skills","map","skill","key","links","link","url","href","Layout","children","id","siteTitle","site","siteMetadata","Date","getFullYear","SEO","description","lang","meta","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"6FAAA,kGAgDaA,EAAS,aAoBPC,UA/DS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACfC,EAAyBD,EAAzBC,eAAgBC,EAASF,EAATE,KAChBC,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KAErB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,MAAOF,EAAYE,QACxB,yBAAKC,UAAU,WACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,mCAAmCH,EAAYE,QAEjE,yBACIE,IAAKL,EAAKM,UACVF,UAAU,gBACVG,IAAQN,EAAYE,MAAjB,iBAIX,yBAAKC,UAAU,mBACX,0BAAMA,UAAU,MAAMI,wBAAyB,CAAEC,OAAQP,KAEzD,2BAAOE,UAAU,WACb,yBAAKA,UAAU,sBACX,wBAAIA,UAAU,uCAAd,cACA,wBAAIA,UAAU,YACTH,EAAYS,OAAOC,KAAI,SAAAC,GAAK,OAAI,wBAAIR,UAAU,gBAAgBS,IAAKD,GAAQA,QAIpF,yBAAKR,UAAU,sBACX,wBAAIA,UAAU,uCAAd,SACA,wBAAIA,UAAU,YACTH,EAAYa,MAAMH,KAAI,SAAAI,GAAI,OACvB,wBAAIF,IAAKE,EAAKC,IAAKZ,UAAU,iBAAgB,uBAAGa,KAAMF,EAAKC,KAAMD,EAAKZ,kB,qFCAvFe,IAhCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVrB,EAAI,OAUR,OACI,yBAAKsB,GAAG,aACJ,kBAAC,IAAD,CAAQC,UAAWvB,EAAKwB,KAAKC,aAAapB,QAC1C,8BAAOgB,GACP,4BAAQf,UAAU,wDACd,yBAAKA,UAAU,uCACX,uBAAGA,UAAU,iBAAb,cACe,IAAIoB,MAAOC,cAD1B,4DAGe,uBAAGR,KAAK,4BAAR,gB,mFCdnC,SAASS,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAM1B,EAAS,EAATA,MAC5BmB,EADqC,OACrCA,KAcFQ,EAAkBH,GAAeL,EAAKC,aAAaI,YAEzD,OACI,kBAAC,IAAD,CACII,eAAgB,CAACH,QACjBzB,MAAOA,EACP6B,cAAa,QAAUV,EAAKC,aAAapB,MACzC0B,KAAM,CACF,CACII,KAAK,cACLC,QAASJ,GAEb,CACIK,SAAS,WACTD,QAAS/B,GAEb,CACIgC,SAAS,iBACTD,QAASJ,GAEb,CACIK,SAAS,UACTD,QAAQ,WAEZ,CACID,KAAK,eACLC,QAAQ,WAEZ,CACID,KAAK,kBACLC,QAASZ,EAAKC,aAAaa,QAE/B,CACIH,KAAK,gBACLC,QAAS/B,GAEb,CACI8B,KAAK,sBACLC,QAASJ,IAEfO,OAAOR,KAKrBH,EAAIY,aAAe,CACfV,KAAK,KACLC,KAAM,GACNF,YAAY,IAUDD","file":"component---src-templates-project-template-js-4e11987baa7e21e293c4.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nconst ProjectTemplate = ({ data }) => {\n    const { markdownRemark, file } = data;\n    const { frontmatter, html } = markdownRemark;\n\n    return (\n        <Layout>\n            <SEO title={frontmatter.title} />\n            <div className=\"project\">\n                <div className=\"project-namecontainer\">\n                    <h1 className=\"heading heading-1 heading-white\">{frontmatter.title}</h1>\n                </div>\n                <img\n                    src={file.publicURL}\n                    className=\"project-image\"\n                    alt={`${frontmatter.title} screenshot`}\n                />\n            </div>\n\n            <div className=\"twocolumnlayout\">\n                <main className=\"txt\" dangerouslySetInnerHTML={{ __html: html }} />\n\n                <aside className=\"sidebar\">\n                    <div className=\"vlist vlist-xsmall\">\n                        <h2 className=\"heading heading-2 heading-decorated\">What I did</h2>\n                        <ul className=\"linklist\">\n                            {frontmatter.skills.map(skill => <li className=\"linklist-item\" key={skill}>{skill}</li>)}\n                        </ul>\n                    </div>\n\n                    <div className=\"vlist vlist-xsmall\">\n                        <h2 className=\"heading heading-2 heading-decorated\">Links</h2>\n                        <ul className=\"linklist\">\n                            {frontmatter.links.map(link => (\n                                <li key={link.url} className=\"linklist-item\"><a href={link.url}>{link.title}</a></li>\n                            ))}\n                        </ul>\n                    </div>\n                </aside>\n            </div>\n        </Layout>\n    );\n};\n\nexport const pageQuery = graphql`\n    query($slug: String!, $headerImage: String!) {\n        markdownRemark(frontmatter: { slug: { eq: $slug } }) {\n            html\n            frontmatter {\n                slug\n                skills\n                links {\n                    title\n                    url\n                }\n                title\n            }\n        }\n        file(name: {eq: $headerImage}, relativeDirectory: {eq: \"headerimages\"}) {\n            publicURL\n        }\n    }\n`;\n\nexport default ProjectTemplate;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./Header\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n    return (\n        <div id=\"container\">\n            <Header siteTitle={data.site.siteMetadata.title} />\n            <main>{children}</main>\n            <footer className=\"tier tier-centered tier-darkbackground tier-nomargin\">\n                <div className=\"vlist vlist-small vlist-centeritems\">\n                    <p className=\"txt txt-white\">\n                        Copyright {new Date().getFullYear()} Markandrewgoetz.com. All rights reserved\n                        &nbsp;â€¢&nbsp;\n                        Built with <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n                    </p>\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                    }\n                }\n            }\n        `\n    );\n\n    const metaDescription = description || site.siteMetadata.description\n\n    return (\n        <Helmet\n            htmlAttributes={{lang}}\n            title={title}\n            titleTemplate={`%s | ${site.siteMetadata.title}`}\n            meta={[\n                {\n                    name: `description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:title`,\n                    content: title,\n                },\n                {\n                    property: `og:description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: site.siteMetadata.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: metaDescription,\n                },\n            ].concat(meta)}\n        />\n    );\n}\n\nSEO.defaultProps = {\n    lang: `en`,\n    meta: [],\n    description: ``,\n}\n\nSEO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.arrayOf(PropTypes.object),\n    title: PropTypes.string.isRequired,\n}\n\nexport default SEO;\n"],"sourceRoot":""}