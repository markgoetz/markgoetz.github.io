{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/Layout.js","webpack:///./src/components/SEO.js"],"names":["ProjectItem","frontmatter","imageUrl","to","slug","className","title","src","alt","pageQuery","ProjectsListPage","data","edges","allMarkdownRemark","map","edge","file","allFile","find","fileEdge","node","name","headerImage","key","publicURL","Layout","children","id","siteTitle","site","siteMetadata","Date","getFullYear","href","SEO","description","lang","meta","metaDescription","htmlAttributes","titleTemplate","content","property","author","concat","defaultProps"],"mappings":"+NAKMA,EAAc,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAChC,OACI,kBAAC,OAAD,CAAMC,GAAE,aAAeF,EAAYG,MAC/B,yBAAKC,UAAU,yBACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,mCACTJ,EAAYK,QAGrB,yBACIC,IAAKL,EACLG,UAAU,gBACVG,IAAQP,EAAYK,MAAjB,mBAgCVG,EAAS,YAwBPC,UAjDU,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClBC,EAAQD,EAAKE,kBAAkBD,MAErC,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKN,MAAM,aACX,yBAAKD,UAAU,oBACX,wBAAIA,UAAU,qBAAd,YACA,yBAAKA,UAAU,WACf,wBAAIA,UAAU,SACRO,EAAME,KAAI,SAAAC,GACR,IAAMC,EAAOL,EAAKM,QAAQL,MAAMM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAASN,EAAKK,KAAKnB,YAAYqB,eAE9F,OACI,wBAAIC,IAAKR,EAAKK,KAAKnB,YAAYG,MAC3B,kBAACJ,EAAD,CAAaC,YAAac,EAAKK,KAAKnB,YAAaC,SAAUc,EAAKI,KAAKI,qB,qFCDtFC,IAhCA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACVf,EAAI,OAUR,OACI,yBAAKgB,GAAG,aACJ,kBAAC,IAAD,CAAQC,UAAWjB,EAAKkB,KAAKC,aAAaxB,QAC1C,8BAAOoB,GACP,4BAAQrB,UAAU,wDACd,yBAAKA,UAAU,uCACX,uBAAGA,UAAU,iBAAb,cACe,IAAI0B,MAAOC,cAD1B,4DAGe,uBAAGC,KAAK,4BAAR,gB,mFCdnC,SAASC,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAM/B,EAAS,EAATA,MAC5BuB,EADqC,OACrCA,KAcFS,EAAkBH,GAAeN,EAAKC,aAAaK,YAEzD,OACI,kBAAC,IAAD,CACII,eAAgB,CAACH,QACjB9B,MAAOA,EACPkC,cAAa,QAAUX,EAAKC,aAAaxB,MACzC+B,KAAM,CACF,CACIhB,KAAK,cACLoB,QAASH,GAEb,CACII,SAAS,WACTD,QAASnC,GAEb,CACIoC,SAAS,iBACTD,QAASH,GAEb,CACII,SAAS,UACTD,QAAQ,WAEZ,CACIpB,KAAK,eACLoB,QAAQ,WAEZ,CACIpB,KAAK,kBACLoB,QAASZ,EAAKC,aAAaa,QAE/B,CACItB,KAAK,gBACLoB,QAASnC,GAEb,CACIe,KAAK,sBACLoB,QAASH,IAEfM,OAAOP,KAKrBH,EAAIW,aAAe,CACfT,KAAK,KACLC,KAAM,GACNF,YAAY,IAUDD","file":"component---src-pages-projects-js-b4ea87e0bb17b58d9203.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\n\nconst ProjectItem = ({ frontmatter, imageUrl }) => {\n    return (\n        <Link to={`/projects/${frontmatter.slug}`}>\n            <div className=\"project project-hover\">\n                <div className=\"project-namecontainer\">\n                    <h2 className=\"heading heading-2 heading-white\">\n                        {frontmatter.title}\n                    </h2>\n                </div>\n                <img\n                    src={imageUrl}\n                    className=\"project-image\"\n                    alt={`${frontmatter.title} screenshot`}\n                />\n            </div>\n        </Link>\n    );\n}\n\nconst ProjectsListPage = ({ data }) => {\n    const edges = data.allMarkdownRemark.edges;\n\n    return (\n        <Layout>\n            <SEO title=\"Projects\" />\n            <div className=\"tier tier-max900\">\n                <h1 className=\"heading heading-1\">Projects</h1>\n                <div className=\"spacer\" />\n                <ul className=\"vlist\">\n                    { edges.map(edge => {\n                        const file = data.allFile.edges.find(fileEdge => fileEdge.node.name === edge.node.frontmatter.headerImage);\n\n                        return (\n                            <li key={edge.node.frontmatter.slug}>\n                                <ProjectItem frontmatter={edge.node.frontmatter} imageUrl={file.node.publicURL} />\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        </Layout>\n    );\n};\n\nexport const pageQuery = graphql`\n    query {\n        allMarkdownRemark(filter: {fileAbsolutePath: {regex: \"/projects/\"}}) {\n            edges {\n                node {\n                    frontmatter {\n                        slug\n                        title\n                        headerImage\n                    }\n                }\n            }\n        }\n        allFile(filter: {relativeDirectory: {eq: \"headerimages\"}}) {\n            edges {\n                node {\n                    name\n                    publicURL\n                }\n            }\n        }\n    }\n`;\n\nexport default ProjectsListPage;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./Header\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n    return (\n        <div id=\"container\">\n            <Header siteTitle={data.site.siteMetadata.title} />\n            <main>{children}</main>\n            <footer className=\"tier tier-centered tier-darkbackground tier-nomargin\">\n                <div className=\"vlist vlist-small vlist-centeritems\">\n                    <p className=\"txt txt-white\">\n                        Copyright {new Date().getFullYear()} Markandrewgoetz.com. All rights reserved\n                        &nbsp;â€¢&nbsp;\n                        Built with <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n                    </p>\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default Layout;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n    const { site } = useStaticQuery(\n        graphql`\n            query {\n                site {\n                    siteMetadata {\n                        title\n                        description\n                        author\n                    }\n                }\n            }\n        `\n    );\n\n    const metaDescription = description || site.siteMetadata.description\n\n    return (\n        <Helmet\n            htmlAttributes={{lang}}\n            title={title}\n            titleTemplate={`%s | ${site.siteMetadata.title}`}\n            meta={[\n                {\n                    name: `description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:title`,\n                    content: title,\n                },\n                {\n                    property: `og:description`,\n                    content: metaDescription,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: site.siteMetadata.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: metaDescription,\n                },\n            ].concat(meta)}\n        />\n    );\n}\n\nSEO.defaultProps = {\n    lang: `en`,\n    meta: [],\n    description: ``,\n}\n\nSEO.propTypes = {\n    description: PropTypes.string,\n    lang: PropTypes.string,\n    meta: PropTypes.arrayOf(PropTypes.object),\n    title: PropTypes.string.isRequired,\n}\n\nexport default SEO;\n"],"sourceRoot":""}